{"version":3,"sources":["webpack:///calendar.min.js","webpack:///webpack/bootstrap 05cc1cfefd47e8ef13a3","webpack:///./src/ts/calendar.ts","webpack:///./src/ts/classes.ts"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","getEventsByServiceQuery","camlQuery","camlViewFields","camlQueryOptions","eventQuery","classes_ts_1","SPServicesJsonQuery","listName","CAMLQuery","CAMLViewFields","CAMLQueryOptions","CAMLRowLimit","debug","getData","bindServiceQueryData","data","i","l","length","event_1","calendarVM","addEvent","moment","format","addSpecialDate","today","Date","todaysMonth","getMonth","todaysYear","getFullYear","updateMonthEvents","loadDatePicker","onMonthChange","firstDate","calendarLoader","document","getElementsByClassName","style","display","calendarCtrl","jQuery","glDatePicker","showAlways","cssName","specialDates","onCalendarRefresh","CalendarViewModel","ready","SP","SOD","executeFunc","ko","applyBindings","getElementById","this","calendarEvents","monthEvents","observableArray","prototype","title","category","description","startDate","endDate","formatedDate","recurrenceID","isAllDayEvent","linkUrl","itemID","push","Title","Category","Description","StartDate","EndDate","FormatedDate","RecurrenceID","IsAllDayEvent","LinkUrl","month","year","removeAll","eventDate","eventTitle","date","repeatMonth","openPopup","event","console","log","UI","ModalDialog","showModalDialog","url","lookupValue","settings","onSuccess","requestData","SPServices","SPGetListItemsJson","when","done","fail","errorThrown"],"mappings":"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","file":"calendar.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\r\n\t * SharePoint Branding Calendar\r\n\t *\r\n\t * - Dependencies:\r\n\t *    - Knockout\r\n\t *    - jQuery\r\n\t *    - jquery.glDatePicker\r\n\t *    - jquery.SPServices\r\n\t *    - moment\r\n\t *    - sp.js (SharePoint)\r\n\t */\r\n\t'use strict';\r\n\tvar classes_ts_1 = __webpack_require__(1);\r\n\tvar calendarVM = new classes_ts_1.CalendarViewModel();\r\n\tjQuery(document).ready(function () {\r\n\t    SP.SOD.executeFunc('sp.js', 'SP.ClientContext', getEventsByServiceQuery);\r\n\t    ko.applyBindings(calendarVM, document.getElementById('calendar-info'));\r\n\t});\r\n\t/**\r\n\t * Function: getEventsByServiceQuery()\r\n\t *\r\n\t * - Uses the jQuery.SPServices library to retrive the events\r\n\t *   contained within a sharepoint calendar.\r\n\t */\r\n\tfunction getEventsByServiceQuery() {\r\n\t    'use strict';\r\n\t    // This is a trick to retrieve recurring events.\r\n\t    // It will not pull dates before today but this \r\n\t    // is required for retrieving recurring events:\r\n\t    var camlQuery = \"<Query>\"\r\n\t        + \"<Where>\"\r\n\t        + \"<DateRangesOverlap>\"\r\n\t        + \"<FieldRef Name='EventDate' />\"\r\n\t        + \"<FieldRef Name='EndDate' />\"\r\n\t        + \"<Value Type='DateTime'>\"\r\n\t        + \"<Now />\"\r\n\t        + \"</Value>\"\r\n\t        + \"</DateRangesOverlap>\"\r\n\t        + \"</Where>\"\r\n\t        + \"<OrderBy>\"\r\n\t        + \"<FieldRef Name='EventDate' Ascending='True' />\"\r\n\t        + \"</OrderBy>\"\r\n\t        + \"</Query>\";\r\n\t    var camlViewFields = \"<ViewFields>\"\r\n\t        + \"<FieldRef Name='ID' />\"\r\n\t        + \"<FieldRef Name='Title' />\"\r\n\t        + \"<FieldRef Name='Category' />\"\r\n\t        + \"<FieldRef Name='Description' />\"\r\n\t        + \"<FieldRef Name='EventDate' />\"\r\n\t        + \"<FieldRef Name='EndDate' />\"\r\n\t        + \"<FieldRef Name='FileRef' />\"\r\n\t        + \"<FieldRef Name='fRecurrence' />\"\r\n\t        + \"<FieldRef Name='fAllDayEvent' />\"\r\n\t        + \"</ViewFields>\";\r\n\t    var camlQueryOptions = \"<QueryOptions>\"\r\n\t        + \"<RecurrencePatternXMLVersion>v3</RecurrencePatternXMLVersion>\"\r\n\t        + \"<ExpandRecurrence>TRUE</ExpandRecurrence>\"\r\n\t        + \"</QueryOptions>\";\r\n\t    var eventQuery = new classes_ts_1.SPServicesJsonQuery({\r\n\t        listName: 'Events',\r\n\t        CAMLQuery: camlQuery,\r\n\t        CAMLViewFields: camlViewFields,\r\n\t        CAMLQueryOptions: camlQueryOptions,\r\n\t        CAMLRowLimit: '1000',\r\n\t        debug: true,\r\n\t    });\r\n\t    eventQuery.getData(bindServiceQueryData);\r\n\t}\r\n\t;\r\n\t/**\r\n\t * Function: bindServiceQueryData(data)\r\n\t *\r\n\t * - Binds results from the getEventsByServiceQuery()\r\n\t *   to calendarVM class.\r\n\t */\r\n\tfunction bindServiceQueryData(data) {\r\n\t    'use strict';\r\n\t    for (var i = 0, l = data.length; i < l; i++) {\r\n\t        var event_1 = data[i];\r\n\t        calendarVM.addEvent(event_1['Title'], event_1['Catagory'], event_1['Description'], event_1['EventDate'], event_1['EndDate'], moment(event_1['EventDate']).format('MMM Do, YYYY'), event_1['RecurrenceID'], event_1['fAllDayEvent'], event_1['FileRef'], event_1['ID']);\r\n\t        calendarVM.addSpecialDate(event_1['EventDate'], event_1['Title']);\r\n\t    }\r\n\t    var today = new Date();\r\n\t    var todaysMonth = today.getMonth();\r\n\t    var todaysYear = today.getFullYear();\r\n\t    calendarVM.updateMonthEvents(todaysMonth, todaysYear);\r\n\t    loadDatePicker();\r\n\t}\r\n\t;\r\n\t/**\r\n\t * Function: loadDatePicker()\r\n\t *\r\n\t * - Loads the glDatePicker calendar with\r\n\t *   all dates found inside specialDates.\r\n\t */\r\n\tfunction loadDatePicker() {\r\n\t    'use strict';\r\n\t    var calendarLoader = document.getElementsByClassName('calendar_loader')[0];\r\n\t    calendarLoader.style.display = 'none';\r\n\t    var calendarCtrl = jQuery('input').glDatePicker({\r\n\t        showAlways: true,\r\n\t        cssName: 'custom',\r\n\t        specialDates: calendarVM.specialDates,\r\n\t        onCalendarRefresh: onMonthChange,\r\n\t    }).glDatePicker();\r\n\t    function onMonthChange(firstDate) {\r\n\t        calendarVM.updateMonthEvents(firstDate.getMonth(), firstDate.getFullYear());\r\n\t    }\r\n\t}\r\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar CalendarViewModel = (function () {\r\n\t    function CalendarViewModel() {\r\n\t        this.specialDates = [];\r\n\t        this.calendarEvents = [];\r\n\t        this.monthEvents = ko.observableArray([]);\r\n\t    }\r\n\t    CalendarViewModel.prototype.addEvent = function (title, category, description, startDate, endDate, formatedDate, recurrenceID, isAllDayEvent, linkUrl, itemID) {\r\n\t        this.calendarEvents.push({\r\n\t            Title: title,\r\n\t            Category: category,\r\n\t            Description: description,\r\n\t            StartDate: startDate,\r\n\t            EndDate: endDate,\r\n\t            FormatedDate: formatedDate,\r\n\t            RecurrenceID: Date,\r\n\t            IsAllDayEvent: isAllDayEvent,\r\n\t            LinkUrl: linkUrl,\r\n\t            itemID: itemID,\r\n\t        });\r\n\t    };\r\n\t    ;\r\n\t    CalendarViewModel.prototype.updateMonthEvents = function (month, year) {\r\n\t        this.monthEvents.removeAll();\r\n\t        for (var i = 0, l = this.calendarEvents.length; i < l; i++) {\r\n\t            if (this.calendarEvents[i].StartDate.getMonth() === month &&\r\n\t                this.calendarEvents[i].StartDate.getFullYear() === year) {\r\n\t                this.monthEvents.push(this.calendarEvents[i]);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    CalendarViewModel.prototype.addSpecialDate = function (eventDate, eventTitle) {\r\n\t        this.specialDates.push({\r\n\t            date: eventDate,\r\n\t            data: eventTitle,\r\n\t            repeatMonth: false,\r\n\t        });\r\n\t    };\r\n\t    ;\r\n\t    CalendarViewModel.prototype.openPopup = function (event) {\r\n\t        console.log(event);\r\n\t        SP.UI.ModalDialog.showModalDialog({\r\n\t            title: 'ababa',\r\n\t            url: event.LinkUrl.lookupValue\r\n\t        });\r\n\t    };\r\n\t    return CalendarViewModel;\r\n\t}());\r\n\texports.CalendarViewModel = CalendarViewModel;\r\n\t;\r\n\tvar SPServicesJsonQuery = (function () {\r\n\t    function SPServicesJsonQuery(settings) {\r\n\t        this.settings = settings;\r\n\t    }\r\n\t    SPServicesJsonQuery.prototype.getData = function (onSuccess) {\r\n\t        var requestData = jQuery().SPServices.SPGetListItemsJson(this.settings);\r\n\t        jQuery.when(requestData).done(function () {\r\n\t            onSuccess(this.data);\r\n\t        }).fail(function (errorThrown) {\r\n\t            console.log('The SPServicesJsonQuery on: ' + this.listName + ' list failed.\\n' + errorThrown);\r\n\t        });\r\n\t    };\r\n\t    return SPServicesJsonQuery;\r\n\t}());\r\n\texports.SPServicesJsonQuery = SPServicesJsonQuery;\r\n\t;\r\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** calendar.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 05cc1cfefd47e8ef13a3\n **/","/**\r\n * SharePoint Branding Calendar\r\n *\r\n * - Dependencies: \r\n *    - Knockout\r\n *    - jQuery\r\n *    - jquery.glDatePicker\r\n *    - jquery.SPServices\r\n *    - moment\r\n *    - sp.js (SharePoint) \r\n */\r\n\r\n'use strict';\r\n\r\n\r\nimport { CalendarViewModel, SPServicesJsonQuery } from './classes.ts';\r\n\r\n\r\nconst calendarVM: CalendarViewModel = new CalendarViewModel();\r\n\r\njQuery(document).ready(function(): void {\r\n\r\n    SP.SOD.executeFunc('sp.js', 'SP.ClientContext', getEventsByServiceQuery);\r\n    ko.applyBindings(calendarVM, document.getElementById('calendar-info'));\r\n});\r\n\r\n\r\n\r\n\r\n/**\r\n * Function: getEventsByServiceQuery()\r\n *\r\n * - Uses the jQuery.SPServices library to retrive the events\r\n *   contained within a sharepoint calendar.\r\n */\r\n\r\nfunction getEventsByServiceQuery(): void {\r\n\r\n    'use strict';\r\n\r\n    // This is a trick to retrieve recurring events.\r\n    // It will not pull dates before today but this \r\n    // is required for retrieving recurring events:\r\n    let camlQuery: string = \r\n        \"<Query>\"\r\n            + \"<Where>\"\r\n                + \"<DateRangesOverlap>\"\r\n                    + \"<FieldRef Name='EventDate' />\"\r\n                    + \"<FieldRef Name='EndDate' />\"\r\n                    + \"<Value Type='DateTime'>\"\r\n                        + \"<Now />\"\r\n                    + \"</Value>\"\r\n                + \"</DateRangesOverlap>\"\r\n            + \"</Where>\"\r\n            + \"<OrderBy>\"\r\n                + \"<FieldRef Name='EventDate' Ascending='True' />\"\r\n            + \"</OrderBy>\"\r\n        + \"</Query>\"\r\n    ;\r\n\r\n    let camlViewFields: string =         \r\n        \"<ViewFields>\"\r\n            + \"<FieldRef Name='ID' />\"\r\n            + \"<FieldRef Name='Title' />\"\r\n            + \"<FieldRef Name='Category' />\"\r\n            + \"<FieldRef Name='Description' />\"\r\n            + \"<FieldRef Name='EventDate' />\"\r\n            + \"<FieldRef Name='EndDate' />\"\r\n            + \"<FieldRef Name='FileRef' />\"\r\n            + \"<FieldRef Name='fRecurrence' />\"\r\n            + \"<FieldRef Name='fAllDayEvent' />\"\r\n        + \"</ViewFields>\"\r\n    ;\r\n\r\n    let camlQueryOptions: string =\r\n        \"<QueryOptions>\"\r\n            + \"<RecurrencePatternXMLVersion>v3</RecurrencePatternXMLVersion>\"\r\n            + \"<ExpandRecurrence>TRUE</ExpandRecurrence>\"\r\n        + \"</QueryOptions>\"\r\n    ;\r\n\r\n    let eventQuery: SPServicesJsonQuery = new SPServicesJsonQuery({\r\n        listName: 'Events',\r\n        CAMLQuery: camlQuery,\r\n        CAMLViewFields: camlViewFields,\r\n        CAMLQueryOptions: camlQueryOptions,\r\n        CAMLRowLimit: '1000',\r\n        debug: true,\r\n    });\r\n\r\n    eventQuery.getData(bindServiceQueryData);\r\n};\r\n\r\n\r\n\r\n\r\n/**\r\n * Function: bindServiceQueryData(data)\r\n *\r\n * - Binds results from the getEventsByServiceQuery() \r\n *   to calendarVM class.\r\n */\r\n\r\nfunction bindServiceQueryData(data: Array<Object>): void {\r\n\r\n    'use strict';\r\n\r\n    for (let i: number = 0, l: number = data.length; i < l; i++) {\r\n\r\n        const event: Object = data[i];\r\n\r\n        calendarVM.addEvent(\r\n            event['Title'],\r\n            event['Catagory'],\r\n            event['Description'],\r\n            event['EventDate'],\r\n            event['EndDate'],\r\n            moment(event['EventDate']).format('MMM Do, YYYY'),\r\n            event['RecurrenceID'],\r\n            event['fAllDayEvent'],\r\n            event['FileRef'],\r\n            event['ID']\r\n        );\r\n\r\n        calendarVM.addSpecialDate(\r\n            event['EventDate'],\r\n            event['Title']\r\n        );\r\n   }\r\n\r\n    const today: Date = new Date();\r\n    const todaysMonth: number = today.getMonth();\r\n    const todaysYear: number = today.getFullYear();\r\n    calendarVM.updateMonthEvents(todaysMonth, todaysYear);\r\n\r\n    loadDatePicker();\r\n};\r\n\r\n\r\n\r\n\r\n/**\r\n * Function: loadDatePicker()\r\n *\r\n * - Loads the glDatePicker calendar with\r\n *   all dates found inside specialDates.\r\n */\r\n\r\nfunction loadDatePicker(): void {\r\n\r\n    'use strict';\r\n\r\n    let calendarLoader: any = document.getElementsByClassName('calendar_loader')[0];\r\n    calendarLoader.style.display = 'none';\r\n\r\n    let calendarCtrl: any = jQuery('input').glDatePicker({\r\n        showAlways: true,\r\n        cssName: 'custom',\r\n        specialDates: calendarVM.specialDates,\r\n        onCalendarRefresh: onMonthChange,\r\n    }).glDatePicker();\r\n\r\n    function onMonthChange(firstDate: any): void {\r\n        calendarVM.updateMonthEvents(firstDate.getMonth(), firstDate.getFullYear());\r\n    }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/ts/calendar.ts\n **/","export class CalendarViewModel {\r\n\r\n    public specialDates: Array<any> = [];\r\n    private calendarEvents: Array<any> = [];\r\n    private monthEvents: any = ko.observableArray([]);\r\n\r\n    public addEvent(\r\n        title: string, \r\n        category: string, \r\n        description: string, \r\n        startDate: Date, \r\n        endDate: Date,\r\n        formatedDate: string,\r\n        recurrenceID: Date,\r\n        isAllDayEvent: Boolean,\r\n        linkUrl: string,\r\n        itemID: number\r\n    ): void {\r\n        this.calendarEvents.push({\r\n            Title: title,\r\n            Category: category,\r\n            Description: description,\r\n            StartDate: startDate,\r\n            EndDate: endDate,\r\n            FormatedDate: formatedDate,\r\n            RecurrenceID: Date,\r\n            IsAllDayEvent: isAllDayEvent,\r\n            LinkUrl: linkUrl,\r\n            itemID: itemID,\r\n        });\r\n    };\r\n\r\n    public updateMonthEvents(month: number, year: number): void {\r\n\r\n        this.monthEvents.removeAll();\r\n\r\n        for (let i: number = 0, l: number = this.calendarEvents.length; i < l; i++) {\r\n            if (this.calendarEvents[i].StartDate.getMonth() === month &&\r\n                this.calendarEvents[i].StartDate.getFullYear() === year) {\r\n      \r\n                this.monthEvents.push(this.calendarEvents[i]);\r\n            }   \r\n        }\r\n    }\r\n\r\n    public addSpecialDate(eventDate: Date, eventTitle: string): void {\r\n\r\n        this.specialDates.push({\r\n            date: eventDate,\r\n            data: eventTitle,\r\n            repeatMonth: false,\r\n        });\r\n    };\r\n\r\n    public openPopup(event: any): void {\r\n        console.log(event);\r\n        SP.UI.ModalDialog.showModalDialog({\r\n            title: 'ababa',\r\n            url: event.LinkUrl.lookupValue\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport class SPServicesJsonQuery {\r\n\r\n    private settings: Object;\r\n\r\n    constructor(settings: Object) {\r\n        this.settings = settings;\r\n    }\r\n\r\n    public getData(onSuccess: Function): void {\r\n\r\n        let requestData: any = jQuery().SPServices.SPGetListItemsJson(this.settings);\r\n\r\n        jQuery.when(requestData).done(function(): void {\r\n            onSuccess(this.data);\r\n        }).fail(function(errorThrown: Object): void {\r\n            console.log('The SPServicesJsonQuery on: ' + this.listName + ' list failed.\\n' + errorThrown);\r\n        });\r\n    }\r\n};\n\n\n/** WEBPACK FOOTER **\n ** ./src/ts/classes.ts\n **/"],"sourceRoot":""}